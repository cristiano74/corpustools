% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/documentation_overview.r
\name{tCorpus_always_copy}
\alias{tCorpus_always_copy}
\title{Modify tCorpus by reference}
\description{
\link[=tCorpus]{(back to overview)}
}
\details{
By default, if any tCorpus method is used that changes the corpus (e.g., set, subset),
it makes this change by reference. This is very convenient when working with a large
corpus, because it means that the corpus does not have to be copied when changes are made,
which slows things down, and can cause memory issues.

To illustrate, for a tCorpus object named `tc`, the subset method can be called like this:

\strong{tc$subset(doc_id \%in\% selection)}

The `tc` object itself is now modified, and does not have to be assigned to a name, as would be the more
common R philosophy. Like this:

\strong{tc = tc$subset(doc_id \%in\% selection)}

The results of both lines of code are the same. The assignment in the second approach is not necessary,
but doesn't harm either because tc$subset returns the modified corpus invisibly (see ?invisible if that sounds spooky).

Be aware, however, that the following does not work!!

\strong{tc2 = tc$subset(doc_id \%in\% selection)}

In this case, tc2 does contain the subsetted corpus, but tc itself will also be subsetted!!
If you want to make a subset (or use any of the other methods that modify the corpus) and also keep the original,
you can use the copy parameter.

\strong{tc2 = tc$subset(doc_id \%in\% selection, copy=T)}

Now, tc will not be subsetted itself, but will subset a copy of itself and return it to be assigned to tc2.

Note that tc is also modified by reference if the subset method (or any other method that modified the corpus)
is called within a function. No matter where and how you call the method, tc itself will be subsetted unless you
explicitly set copy to True.

Alternatively, you can also set copy = T to be the default, in which case the tCorpus works more
according to the classic R philosophy. To do so, you can set tc$always_copy to True

\strong{tc$always_copy = T}

This, however is not recommended, especially when working with a huge corpus. As explained above,
changing by reference is much faster and more memory efficient.
}
