% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shatter_tcorpus.r
\name{shatter_tcorpus}
\alias{shatter_tcorpus}
\title{Shatter a tCorpus to create or append a shattered tCorpus}
\usage{
shatter_tcorpus(tc, stc, meta_columns = NULL, tokens_per_shard = 1e+06,
  if_exists = c("stop", "append", "overwrite"), if_duplicates = c("stop",
  "skip", "rename"), compress = TRUE, verbose = F)
}
\arguments{
\item{tc}{a tCorpus object}

\item{stc}{THe name of the shattered tCorpus}

\item{meta_columns}{Optionally, meta columns can be used to index the shards. For example, if the meta columns "medium" and "month" are given, then all shards are first indexed in folders per month per medium}

\item{tokens_per_shard}{The number of tokens per shard. This is an approximation, since a tCorpus should not be broken within documents. Also, given the number of shards that is required, tokens will be evently distributed (for instance, if tokens_per_shard is 1,000,000, and there are 1,500,000 tokens, you'll get 2 tokens of 750,000 shards)}

\item{if_exists}{What to do if the stc already exists? Default is "stop", to prevent accidental overwriting. "append" can be used to add the new shards to the existing shattered tCorpus, and "overwrite" can be used to delete the old shattered tCorpus.}

\item{if_duplicates}{In case that if_exists == "append", what to do if the new tCorpus has document ids that are already in the shattered tCorpus? Default is "stop". Alternatively, duplicate doc_ids can be skipped ("skip"), in case they are actually identical, or the name can be changed ("rename") in case only the name is duplicate}

\item{compress}{Use compression}

\item{verbose}{If TRUE, report progress}
}
\value{
a shattered_tCorpus object
}
\description{
Shatters a tCorpus into one or more shards (i.e. subsets). Each subset is saved on disk and removed from memory.
The returned shattered_tCorpus object links to these subsets, and can be used as a normal tCorpus object (though with some restrictions).
Where possible, the tCorpus functions will then be performed per shard, and the entire tCorpus does not have to be kept in memory.
Put simply: if you run into memory problems because you have too much data, you'll probably want to shatter it.
}
\details{
See the documentation for \link{shattered_tCorpus} for a more detailed explanation of why you would ever want to shatter your tCorpus.

!! please read the documentation for shard_path if you intend to save the shattered_tCorpus
}
